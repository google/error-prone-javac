#
# Copyright (c) 1999, 2014, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

## standard options

javac.opt.g=\
    Generate all debugging info
javac.opt.g.none=\
    Generate no debugging info
javac.opt.g.lines.vars.source=\
    Generate only some debugging info
javac.opt.nowarn=\
    Generate no warnings
javac.opt.verbose=\
    Output messages about what the compiler is doing
javac.opt.deprecation=\
    Output source locations where deprecated APIs are used
javac.opt.classpath=\
    Specify where to find user class files and annotation processors
javac.opt.sourcepath=\
    Specify where to find input source files
javac.opt.bootclasspath=\
    Override location of bootstrap class files
javac.opt.Xbootclasspath.p=\
    Prepend to the bootstrap class path
javac.opt.Xbootclasspath.a=\
    Append to the bootstrap class path
javac.opt.endorseddirs=\
    Override location of endorsed standards path
javac.opt.extdirs=\
    Override location of installed extensions
javac.opt.processorpath=\
    Specify where to find annotation processors
javac.opt.processor=\
    Names of the annotation processors to run; bypasses default discovery process
javac.opt.parameters=\
    Generate metadata for reflection on method parameters
javac.opt.proc.none.only=\
    Control whether annotation processing and/or compilation is done.
javac.opt.d=\
    Specify where to place generated class files
javac.opt.sourceDest=\
    Specify where to place generated source files
javac.opt.headerDest=\
    Specify where to place generated native header files
javac.opt.J=\
    Pass <flag> directly to the runtime system
javac.opt.encoding=\
    Specify character encoding used by source files
javac.opt.profile=\
    Check that API used is available in the specified profile
javac.opt.target=\
    Generate class files for specific VM version
javac.opt.source=\
    Provide source compatibility with specified release
javac.opt.Werror=\
    Terminate compilation if warnings occur
javac.opt.A=\
    Options to pass to annotation processors
javac.opt.implicit=\
    Specify whether or not to generate class files for implicitly referenced files
javac.opt.pkginfo=\
    Specify handling of package-info files
javac.opt.arg.class=\
    <class>
javac.opt.arg.class.list=\
    <class1>[,<class2>,<class3>...]
javac.opt.arg.flag=\
    <flag>
javac.opt.arg.key.equals.value=\
    key[=value]
javac.opt.arg.path=\
    <path>
javac.opt.arg.dirs=\
    <dirs>
javac.opt.arg.directory=\
    <directory>
javac.opt.arg.encoding=\
    <encoding>
javac.opt.arg.profile=\
    <profile>
javac.opt.arg.release=\
    <release>
javac.opt.arg.number=\
    <number>
javac.opt.plugin=\
    Name and optional arguments for a plug-in to be run
javac.opt.arg.plugin=\
    "name args"

## extended options

javac.opt.maxerrs=\
    Set the maximum number of errors to print
javac.opt.maxwarns=\
    Set the maximum number of warnings to print
javac.opt.nogj=\
    Don't accept generics in the language
javac.opt.moreinfo=\
    Print extended information for type variables
javac.opt.printflat=\
    Print abstract syntax tree after inner class conversion
javac.opt.printsearch=\
    Print information where classfiles are searched
javac.opt.prompt=\
    Stop after each error
javac.opt.retrofit=\
    Retrofit existing classfiles with generic types
javac.opt.s=\
    Emit java sources instead of classfiles
javac.opt.scramble=\
    Scramble private identifiers in bytecode
javac.opt.scrambleall=\
    Scramble package visible identifiers in bytecode
javac.opt.version=\
    Version information
javac.opt.arg.pathname=\
    <pathname>
javac.opt.arg.file=\
    <filename>
javac.opt.Xlint=\
    Enable recommended warnings
javac.opt.Xlint.all=\
    Enable all warnings
javac.opt.Xlint.none=\
    Disable all warnings
#L10N: do not localize: -Xlint
javac.opt.Xlint.subopts=\
    -Xlint:key,...
javac.opt.Xlint.suboptlist=\n\
\        Warnings to enable or disable, separated by comma.\n\
\        Precede a key by '-' to disable the specified warning.\n\
\        Supported keys are:
javac.opt.Xlint.desc.auxiliaryclass=\
    Warn about an auxiliary class that is hidden in a source file, and is used from other files.

javac.opt.Xlint.desc.cast=\
    Warn about use of unnecessary casts.

javac.opt.Xlint.desc.classfile=\
    Warn about issues related to classfile contents.

javac.opt.Xlint.desc.deprecation=\
    Warn about use of deprecated items.

javac.opt.Xlint.desc.dep-ann=\
    Warn about items marked as deprecated in JavaDoc but not using the @Deprecated annotation.

javac.opt.Xlint.desc.divzero=\
    Warn about division by constant integer 0.

javac.opt.Xlint.desc.empty=\
    Warn about empty statement after if.

javac.opt.Xlint.desc.fallthrough=\
    Warn about falling through from one case of a switch statement to the next.

javac.opt.Xlint.desc.finally=\
    Warn about finally clauses that do not terminate normally.

javac.opt.Xlint.desc.options=\
    Warn about issues relating to use of command line options.

javac.opt.Xlint.desc.overloads=\
    Warn about issues regarding method overloads.

javac.opt.Xlint.desc.overrides=\
    Warn about issues regarding method overrides.

javac.opt.Xlint.desc.path=\
    Warn about invalid path elements on the command line.

javac.opt.Xlint.desc.processing=\
    Warn about issues regarding annotation processing.

javac.opt.Xlint.desc.rawtypes=\
    Warn about use of raw types.

javac.opt.Xlint.desc.serial=\
    Warn about Serializable classes that do not provide a serial version ID.

javac.opt.Xlint.desc.static=\
    Warn about accessing a static member using an instance.

javac.opt.Xlint.desc.sunapi=\
    Warn about proprietary API that may be removed in a future release.

javac.opt.Xlint.desc.try=\
    Warn about issues relating to use of try blocks (i.e. try-with-resources).

javac.opt.Xlint.desc.unchecked=\
    Warn about unchecked operations.

javac.opt.Xlint.desc.varargs=\
    Warn about potentially unsafe vararg methods

javac.opt.Xdoclint=\
    Enable recommended checks for problems in javadoc comments
# L10N: do not localize: all none
javac.opt.Xdoclint.subopts = \
    (all|none|[-]<group>)[/<access>]

# L10N: do not localize: accessibility html missing reference syntax
# L10N: do not localize: public protected package private
javac.opt.Xdoclint.custom=\n\
\        Enable or disable specific checks for problems in javadoc comments,\n\
\        where <group> is one of accessibility, html, missing, reference, or syntax,\n\
\        and <access> is one of public, protected, package, or private.
javac.opt.Xstdout=\
    Redirect standard output
javac.opt.X=\
    Print a synopsis of nonstandard options
javac.opt.help=\
    Print a synopsis of standard options
javac.opt.print=\
    Print out a textual representation of specified types
javac.opt.printRounds=\
    Print information about rounds of annotation processing
javac.opt.printProcessorInfo=\
    Print information about which annotations a processor is asked to process
javac.opt.userpathsfirst=\
    Search classpath and sourcepath for classes before the bootclasspath instead of after
javac.opt.prefer=\
    Specify which file to read when both a source file and class file are found for an implicitly compiled class
javac.opt.AT=\
    Read options and filenames from file
javac.opt.diags=\
    Select a diagnostic mode

## errors

javac.err.empty.A.argument=\
    -A requires an argument; use ''-Akey'' or ''-Akey=value''
javac.err.invalid.arg=\
    invalid argument: {0}
javac.err.invalid.A.key=\
     key in annotation processor option ''{0}'' is not a dot-separated sequence of identifiers
javac.err.invalid.flag=\
    invalid flag: {0}
javac.err.profile.bootclasspath.conflict=\
    profile and bootclasspath options cannot be used together
javac.err.invalid.profile=\
    invalid profile: {0}
javac.err.invalid.target=\
    invalid target release: {0}
javac.err.no.source.files=\
    no source files
javac.err.no.source.files.classes=\
    no source files or class names
javac.err.req.arg=\
    {0} requires an argument
javac.err.invalid.source=\
    invalid source release: {0}
javac.err.error.writing.file=\
    error writing {0}; {1}
javac.warn.source.target.conflict=\
    source release {0} requires target release {1}
javac.warn.target.default.source.conflict=\
    target release {0} conflicts with default source release {1}
javac.warn.profile.target.conflict=\
    profile {0} is not valid for target release {1}
javac.err.dir.not.found=\
    directory not found: {0}
javac.err.file.not.found=\
    file not found: {0}
javac.err.file.not.directory=\
    not a directory: {0}
javac.err.file.not.file=\
    not a file: {0}
javac.msg.plugin.not.found=\
    plug-in not found: {0}
## messages

javac.msg.usage.header=\
Usage: {0} <options> <source files>\n\
where possible options include:

javac.msg.usage=\
    Usage: {0} <options> <source files>\n\
    use -help for a list of possible options

javac.msg.usage.nonstandard.footer=\
These options are non-standard and subject to change without notice.

javac.msg.bug=\
An exception has occurred in the compiler ({0}). \
Please file a bug at the Java Developer Connection (http://java.sun.com/webapps/bugreport)  \
after checking the Bug Parade for duplicates. \
Include your program and the following diagnostic in your report.  Thank you.

javac.msg.io=\
\n\nAn input/output error occurred.\n\
Consult the following stack trace for details.\n

javac.msg.proc.annotation.uncaught.exception=\
\n\nAn annotation processor threw an uncaught exception.\n\
Consult the following stack trace for details.\n

javac.msg.plugin.uncaught.exception=\
\n\nA plugin threw an uncaught exception.\n\
Consult the following stack trace for details.\n

javac.msg.resource=\
\n\nThe system is out of resources.\n\
Consult the following stack trace for details.\n

javac.version={0} {1}
javac.fullVersion={0} full version "{1}"
